{
    "name": "5GBlueprint",
    "description": "Framework for scanning 5G workloads",
    "attributes": {
        "builtin": true
    },
    "typeTags": [
        "security"
    ],
    "version": null,
    "controls": [
        {
            "name": "Ingress/Egress from the necessary workloads",
            "attributes": {},
            "description": "There should be kubearmor policies for the defined sensitive assets",
            "remediation": "Create a Kubearmor policy for the given assets",
            "long_description": "There should be kubearmor policies for the defined sensitive assets",
            "test": "Check that there are no pods whose sensitive assets are not protected",
            "id": "T-ORAN-01",
            "controlID": "T-ORAN-01",
            "baseScore": 8.0,
            "scanningScope": {
                "matches": [
                    "cluster",
                    "file"
                ]
            },
            "category": {
                "name": "Workload",
                "subCategory": {
                    "name": "Resource management",
                    "id": "Cat-7"
                },
                "id": "Cat-5"
            },
            "rules": [
                {
                    "name": "5G-least-permissive-policies",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.kubearmor.com"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "KubeArmorPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no least permissive policies for sensitive assets",
                    "remediation": "Make sure sensitive assets are protected with Kubearmor Policies",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    # workloads := input.spec.workloads\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n        # work_list := work.spec.workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n        not labels_match(work, pod)\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n\ndeny[msga] {\n\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n\n\t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n        labels_match(work, pod)\n\t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  check_zerotrust(work, kubearmorpolicie)]\n\t\tcount(kubearmor_policies_connected_to_pod) < 1\n\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v does NOT have any Kubearmor policy\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [{\"path\": sprintf(\"There are no Kubearmor Policies for 5G workloads: %v. Please add them\", [kubearmor_policies_connected_to_pod]), \"value\":\"false\"}],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n# deny[msga] {\n\n#      \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n#         work := workloads[_]\n\n#         pods := [p | p = input[_]; p.kind == \"Deployment\"]\n#         pod := pods[_]\n\n# \t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n#         labels_match(work, pod)\n# \t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  check_zerotrust(work, kubearmorpolicie)]\n# \t\tcount(kubearmor_policies_connected_to_pod) > 0\n\t\t \n#         msga := {\n# \t\t\"alertMessage\": sprintf(\"Workload %v does have zero Kubearmor policy\", [pod.metadata.name]),\n# \t\t\"packagename\": \"armo_builtins\",\n# \t\t\"alertScore\": 7,\n# \t\t\"failedPaths\": [],\n# \t\t\"fixPaths\": [],\n# \t\t\"alertObject\": {\n# \t\t\t\"k8sApiObjects\": [pod]\n# \t\t}\n# \t}\n# }\n\ncheck_zerotrust(wlconfig, kubearmorpolicie) {\n\tsome i\n\twlpolicie := wlconfig.spec.workloads[i].policies[_]\n\tkubearmorpolicie.metadata.name == wlpolicie.name\n}\n\n# deny[msga] {\n\n#         pods := [p | p = input[_]; p.kind == \"Deployment\"]\n#         pod := pods[_]\n\n# \t\tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n#         work := workloads[_]\n\n# \t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n#         labels_match(work, pod)\n# \t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  wlConnectedToKubeArmorPolicy(pod, kubearmorpolicie)]\n# \t\tcount(kubearmor_policies_connected_to_pod)  0\n# \t    # goodPolicies := [goodpolicie |  goodpolicie= kubearmor_policies_connected_to_pod[_];  sensitiveAssetsDirProtected(pod, goodpolicie)]\n# \t    # count(goodPolicies) < 1\n\n#         msga := {\n# \t\t\"alertMessage\": sprintf(\"Workload %v does have Least Permissive Policies for sensitive assets\", [pod.metadata.name]),\n# \t\t\"packagename\": \"armo_builtins\",\n# \t\t\"alertScore\": 7,\n# \t\t\"failedPaths\": [],\n# \t\t\"fixPaths\": [],\n# \t\t\"alertObject\": {\n# \t\t\t\"k8sApiObjects\": [pod]\n# \t\t}\n# \t}\n# }\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.spec.selector.matchLabels[key] == value\n}\n\nwlConnectedToKubeArmorPolicy(wl, kubearmorpolicie){\n    count(kubearmorpolicie.spec.selector.matchLabels) == 0\n}\n\n\nwlConnectedToKubeArmorPolicy(wl, kubearmorpolicie){\n\tcount(kubearmorpolicie.spec.selector.matchLabels) > 0\n    count({x | kubearmorpolicie.spec.selector.matchLabels[x] == wl.spec.template.metadata.labels[x]}) == count(kubearmorpolicie.spec.selector.matchLabels)\n}\n\n# sensitiveAssetsDirProtected(wlconfig, kubearmorpolicie) {\n# \tsome i\n# \tsome j\n# \tendswith(wlconfig.spec.workloads[i].sensitive_asset_locations[j], \"/\")\n# \tasset := wlconfig.spec.workloads[i].sensitive_asset_locations[j]\n# \tsome k\n# \tkubearmorpolicie.spec.matchDirectories[k].dir == asset\n# }\n\n# sensitiveAssetsPathProtected(wlconfig, kubearmorpolicie) {\n# \tnot sensitiveAssetsDirProtected(wlconfig, kubearmorpolicie)\n# }\n\n\n\n\n"
                }
            ]
        },
        {
            "name": "Misconfigured or poorly configured O-RAN components",
            "attributes": {},
            "description": "An attacker exploits misconfigured or poorly configured O-RAN components",
            "remediation": "Create a network policy to add an egress rule",
            "long_description": "Unauthenticated/unauthorized access to O-RAN components could possibly be achieved via the different O-RAN interfaces, depending upon the configuration of the hardware-software O-RAN system.",
            "test": "Check that there are ingress/egress defined, as well as admission controller policies",
            "id": "T-ORAN-02",
            "controlID": "T-ORAN-02",
            "baseScore": 8.0,
            "scanningScope": {
                "matches": [
                    "cluster",
                    "file"
                ]
            },
            "category": {
                "name": "Workload",
                "subCategory": {
                    "name": "Resource management",
                    "id": "Cat-7"
                },
                "id": "Cat-5"
            },
            "rules": [
                {
                    "name": "5G-egress-ingress-defined",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "NetworkPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no ingress and egress defined for pod",
                    "remediation": "Make sure you define ingress and egress policies for all your Pods",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    # workloads := input.spec.workloads\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n        # work_list := work.spec.workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n        not labels_match(work, pod)\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\ndeny[msga] {\n\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n\n\t\tnetworkpolicies := [networkpolicie |  networkpolicie= input[_]; networkpolicie.kind == \"NetworkPolicy\"]\n        labels_match(work, pod)\n\t\tnetwork_policies_connected_to_pod := [networkpolicie |  networkpolicie= networkpolicies[_];  check_zerotrust(work, networkpolicie)]\n\t\tcount(network_policies_connected_to_pod) < 1\n\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v does NOT have a network policy\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [{\"path\": sprintf(\"There are no Network Policies for 5G workloads: %v. Please add them\", [network_policies_connected_to_pod]),}],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.metadata.labels[key] == value\n}\n\ncheck_zerotrust(wlconfig, networkpolicie) {\n\tsome i\n\twlpolicie := wlconfig.spec.workloads[i].policies[_]\n\tnetworkpolicie.metadata.name == wlpolicie.name\n}\n\n\n\nlist_contains(list, element) {\n  some i\n  list[i] == element\n}\n\n\n"
                },
                {
                    "name": "5G-admission-control-policies",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "kyverno.io"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "ClusterPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no admission controller (kyverno) policies for the defined 5G pod",
                    "remediation": "Make sure you define admission controller policies for all your Pods",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    workloads := [w | w = input[_]; w.kind == \"WorkloadConfig\"]\n    work := workloads[_]\n\n    pods := [p | p = input[_]; p.kind == \"Deployment\"]\n    pod := pods[_]\n\n    not labels_match(work, pod)\n\n    msga := {\n        \"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n        \"packagename\": \"armo_builtins\",\n        \"alertScore\": 7,\n        \"failedPaths\": [],\n        \"fixPaths\": [],\n        \"alertObject\": {\n            \"k8sApiObjects\": [pod]\n        }\n    }\n}\n\ndeny[msga] {\n    workloads := [w | w = input[_]; w.kind == \"WorkloadConfig\"]\n    work := workloads[i]\n\n    pods := [p | p = input[_]; p.kind == \"Deployment\"]\n    pod := pods[_]\n\n    clusterpolicies := [policy | policy = input[_]; policy.kind == \"ClusterPolicy\"]\n    labels_match(work, pod)\n    cluster_policies_connected_to_pod := [policy | policy = clusterpolicies[_]; check_kyverno(work, policy)]\n    count(cluster_policies_connected_to_pod) < 1\n    \n    missing_policies := [policy | policy = clusterpolicies[i]; not policy_in_workload_config(work, policy)]\n\n    msga := {\n        \"alertMessage\": sprintf(\"Workload %v does NOT have any Kyverno ClusterPolicy\", [pod.metadata.name]),\n        \"packagename\": \"armo_builtins\",\n        \"alertScore\": 7,\n        \"failedPaths\": [],\n        \"fixPaths\": [{\"path\": sprintf(\"Add Kyverno ClusterPolicy %v to the cluster\", [missing_policies[_].metadata.name]), \"value\":\"\"}],\n        \"alertObject\": {\n            \"k8sApiObjects\": [pod]\n        }\n    }\n}\n\npolicy_in_workload_config(work, policy) {\n    some i\n    some p\n    wlpolicie := work.spec.workloads[i].policies[p]\n    wlpolicie.name == policy.metadata.name\n    wlpolicie.kind == policy.kind\n}\n\ncheck_kyverno(wlconfig, policy) {\n    some i\n    wlpolicie := wlconfig.spec.workloads[i].policies[_]\n    policy.metadata.name == wlpolicie.name\n}\n\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.metadata.labels[key] == value\n}\n\nwlConnectedToClusterPolicy(wl, policy) {\n    count(policy.spec.match.resources.selector.matchLabels) == 0\n}\n\nwlConnectedToClusterPolicy(wl, policy) {\n    count(policy.spec.match.resources.selector.matchLabels) > 0\n    count({x | policy.spec.match.resources.selector.matchLabels[x] == wl.spec.template.metadata.labels[x]}) == count(policy.spec.match.resources.selector.matchLabels)\n}\n \n "
                }
            ]
        },
        {
            "name": "Exploit weak authentication and access control to penetrate O-RAN network boundary",
            "attributes": {},
            "description": "Attacks from the internet exploit weak authentication and access control to penetrate O-RAN network boundary",
            "remediation": "Create a Kubearmor policy for the given assets",
            "long_description": "Attacks from the internet exploit weak authentication and access control to penetrate O-RAN network boundary",
            "test": "Check that there are no pods which do not have admission control policies as defined in the workload config",
            "id": "T-ORAN-03",
            "controlID": "T-ORAN-03",
            "baseScore": 8.0,
            "scanningScope": {
                "matches": [
                    "cluster",
                    "file"
                ]
            },
            "category": {
                "name": "Workload",
                "subCategory": {
                    "name": "Resource management",
                    "id": "Cat-7"
                },
                "id": "Cat-5"
            },
            "rules": [
                {
                    "name": "5G-egress-ingress-defined",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "NetworkPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no ingress and egress defined for pod",
                    "remediation": "Make sure you define ingress and egress policies for all your Pods",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    # workloads := input.spec.workloads\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n        # work_list := work.spec.workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n        not labels_match(work, pod)\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\ndeny[msga] {\n\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n\n\t\tnetworkpolicies := [networkpolicie |  networkpolicie= input[_]; networkpolicie.kind == \"NetworkPolicy\"]\n        labels_match(work, pod)\n\t\tnetwork_policies_connected_to_pod := [networkpolicie |  networkpolicie= networkpolicies[_];  check_zerotrust(work, networkpolicie)]\n\t\tcount(network_policies_connected_to_pod) < 1\n\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v does NOT have a network policy\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [{\"path\": sprintf(\"There are no Network Policies for 5G workloads: %v. Please add them\", [network_policies_connected_to_pod]),}],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.metadata.labels[key] == value\n}\n\ncheck_zerotrust(wlconfig, networkpolicie) {\n\tsome i\n\twlpolicie := wlconfig.spec.workloads[i].policies[_]\n\tnetworkpolicie.metadata.name == wlpolicie.name\n}\n\n\n\nlist_contains(list, element) {\n  some i\n  list[i] == element\n}\n\n\n"
                }
            ]
        },
        {
            "name": "Prevent use of third-party software deployment tools",
            "attributes": {},
            "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network",
            "remediation": "Create a Kubearmor policy to prevent installation of third party software deployment tools.",
            "long_description": "An adversary may use CI/CD tools to gain access to production hosts/VNFs for discovery, data exfiltration and for deployment of lateral movements tools.",
            "test": "Check that there are no pods which allow third party software deployment tools",
            "id": "MITRE-FGT1072",
            "controlID": "MITRE-FGT1072",
            "baseScore": 8.0,
            "scanningScope": {
                "matches": [
                    "cluster",
                    "file"
                ]
            },
            "category": {
                "name": "Workload",
                "subCategory": {
                    "name": "Resource management",
                    "id": "Cat-7"
                },
                "id": "Cat-5"
            },
            "rules": [
                {
                    "name": "5G-least-permissive-policies",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.kubearmor.com"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "KubeArmorPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no least permissive policies for sensitive assets",
                    "remediation": "Make sure sensitive assets are protected with Kubearmor Policies",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    # workloads := input.spec.workloads\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n        # work_list := work.spec.workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n        not labels_match(work, pod)\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n\ndeny[msga] {\n\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n\n\t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n        labels_match(work, pod)\n\t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  check_zerotrust(work, kubearmorpolicie)]\n\t\tcount(kubearmor_policies_connected_to_pod) < 1\n\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v does NOT have any Kubearmor policy\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [{\"path\": sprintf(\"There are no Kubearmor Policies for 5G workloads: %v. Please add them\", [kubearmor_policies_connected_to_pod]), \"value\":\"false\"}],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n# deny[msga] {\n\n#      \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n#         work := workloads[_]\n\n#         pods := [p | p = input[_]; p.kind == \"Deployment\"]\n#         pod := pods[_]\n\n# \t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n#         labels_match(work, pod)\n# \t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  check_zerotrust(work, kubearmorpolicie)]\n# \t\tcount(kubearmor_policies_connected_to_pod) > 0\n\t\t \n#         msga := {\n# \t\t\"alertMessage\": sprintf(\"Workload %v does have zero Kubearmor policy\", [pod.metadata.name]),\n# \t\t\"packagename\": \"armo_builtins\",\n# \t\t\"alertScore\": 7,\n# \t\t\"failedPaths\": [],\n# \t\t\"fixPaths\": [],\n# \t\t\"alertObject\": {\n# \t\t\t\"k8sApiObjects\": [pod]\n# \t\t}\n# \t}\n# }\n\ncheck_zerotrust(wlconfig, kubearmorpolicie) {\n\tsome i\n\twlpolicie := wlconfig.spec.workloads[i].policies[_]\n\tkubearmorpolicie.metadata.name == wlpolicie.name\n}\n\n# deny[msga] {\n\n#         pods := [p | p = input[_]; p.kind == \"Deployment\"]\n#         pod := pods[_]\n\n# \t\tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n#         work := workloads[_]\n\n# \t\tkubearmorpolicies := [kubearmorpolicie |  kubearmorpolicie= input[_]; kubearmorpolicie.kind == \"KubeArmorPolicy\"]\n#         labels_match(work, pod)\n# \t\tkubearmor_policies_connected_to_pod := [kubearmorpolicie |  kubearmorpolicie= kubearmorpolicies[_];  wlConnectedToKubeArmorPolicy(pod, kubearmorpolicie)]\n# \t\tcount(kubearmor_policies_connected_to_pod)  0\n# \t    # goodPolicies := [goodpolicie |  goodpolicie= kubearmor_policies_connected_to_pod[_];  sensitiveAssetsDirProtected(pod, goodpolicie)]\n# \t    # count(goodPolicies) < 1\n\n#         msga := {\n# \t\t\"alertMessage\": sprintf(\"Workload %v does have Least Permissive Policies for sensitive assets\", [pod.metadata.name]),\n# \t\t\"packagename\": \"armo_builtins\",\n# \t\t\"alertScore\": 7,\n# \t\t\"failedPaths\": [],\n# \t\t\"fixPaths\": [],\n# \t\t\"alertObject\": {\n# \t\t\t\"k8sApiObjects\": [pod]\n# \t\t}\n# \t}\n# }\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.spec.selector.matchLabels[key] == value\n}\n\nwlConnectedToKubeArmorPolicy(wl, kubearmorpolicie){\n    count(kubearmorpolicie.spec.selector.matchLabels) == 0\n}\n\n\nwlConnectedToKubeArmorPolicy(wl, kubearmorpolicie){\n\tcount(kubearmorpolicie.spec.selector.matchLabels) > 0\n    count({x | kubearmorpolicie.spec.selector.matchLabels[x] == wl.spec.template.metadata.labels[x]}) == count(kubearmorpolicie.spec.selector.matchLabels)\n}\n\n# sensitiveAssetsDirProtected(wlconfig, kubearmorpolicie) {\n# \tsome i\n# \tsome j\n# \tendswith(wlconfig.spec.workloads[i].sensitive_asset_locations[j], \"/\")\n# \tasset := wlconfig.spec.workloads[i].sensitive_asset_locations[j]\n# \tsome k\n# \tkubearmorpolicie.spec.matchDirectories[k].dir == asset\n# }\n\n# sensitiveAssetsPathProtected(wlconfig, kubearmorpolicie) {\n# \tnot sensitiveAssetsDirProtected(wlconfig, kubearmorpolicie)\n# }\n\n\n\n\n"
                }
            ]
        },
        {
            "name": "No Egress connections should be allowed from NRF at runtime.",
            "attributes": {},
            "description": "No Egress connections should be allowed from NRF at runtime.",
            "remediation": "Create a Kubearmor policy to prevent installation of third party software deployment tools.",
            "long_description": "No Egress connections should be allowed from NRF at runtime.",
            "test": "Check that there are no pods which allow third party software deployment tools",
            "id": "3GPP-33.501",
            "controlID": "3GPP-33.501",
            "baseScore": 8.0,
            "scanningScope": {
                "matches": [
                    "cluster",
                    "file"
                ]
            },
            "category": {
                "name": "Workload",
                "subCategory": {
                    "name": "Resource management",
                    "id": "Cat-7"
                },
                "id": "Cat-5"
            },
            "rules": [
                {
                    "name": "5G-egress-ingress-defined",
                    "attributes": {},
                    "ruleLanguage": "Rego",
                    "match": [
                        {
                            "apiGroups": [
                                "apps"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "Deployment"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "apiVersions": [
                                "v1"
                            ],
                            "resources": [
                                "NetworkPolicy"
                            ]
                        },
                        {
                            "apiGroups": [
                                "security.seran.org"
                            ],
                            "apiVersions": [
                                "v1alpha1"
                            ],
                            "resources": [
                                "WorkloadConfig"
                            ]
                        }
                    ],
                    "ruleDependencies": [],
                    "description": "fails if there are no ingress and egress defined for pod",
                    "remediation": "Make sure you define ingress and egress policies for all your Pods",
                    "ruleQuery": "armo_builtins",
                    "rule": "package armo_builtins\n\nimport future.keywords.in\n\ndeny[msga] {\n    # workloads := input.spec.workloads\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n        # work_list := work.spec.workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n        not labels_match(work, pod)\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v is not present\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\ndeny[msga] {\n\n     \tworkloads := [w |  w= input[_]; w.kind == \"WorkloadConfig\"]\n        work := workloads[_]\n\n        pods := [p | p = input[_]; p.kind == \"Deployment\"]\n        pod := pods[_]\n\n\t\tnetworkpolicies := [networkpolicie |  networkpolicie= input[_]; networkpolicie.kind == \"NetworkPolicy\"]\n        labels_match(work, pod)\n\t\tnetwork_policies_connected_to_pod := [networkpolicie |  networkpolicie= networkpolicies[_];  check_zerotrust(work, networkpolicie)]\n\t\tcount(network_policies_connected_to_pod) < 1\n\n\n        msga := {\n\t\t\"alertMessage\": sprintf(\"Workload %v does NOT have a network policy\", [pod.metadata.name]),\n\t\t\"packagename\": \"armo_builtins\",\n\t\t\"alertScore\": 7,\n\t\t\"failedPaths\": [],\n\t\t\"fixPaths\": [{\"path\": sprintf(\"There are no Network Policies for 5G workloads: %v. Please add them\", [network_policies_connected_to_pod]),}],\n\t\t\"alertObject\": {\n\t\t\t\"k8sApiObjects\": [pod]\n\t\t}\n\t}\n}\n\n# Function to check if labels match between work_list and pod\nlabels_match(work, pod) {\n      some i\n\t  some key,value in work.spec.workloads[i].labels\n      pod.metadata.labels[key] == value\n}\n\ncheck_zerotrust(wlconfig, networkpolicie) {\n\tsome i\n\twlpolicie := wlconfig.spec.workloads[i].policies[_]\n\tnetworkpolicie.metadata.name == wlpolicie.name\n}\n\n\n\nlist_contains(list, element) {\n  some i\n  list[i] == element\n}\n\n\n"
                }
            ]
        }
    ],
    "ControlsIDs": [
        "T-ORAN-01",
        "T-ORAN-02",
        "T-ORAN-03",
        "MITRE-FGT1072",
        "3GPP-33.501"
    ]
}